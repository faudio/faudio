
/** 
    Mutable buffers. 
    
    Each buffer is a mutable sequence of bytes with single-ownership semantics. The length
    of a buffer can never change, but its memory can be reused using @ref fa_buffer_dresize.
    
    The contents of a buffer is *untyped*, i.e. it is possible to write 16-bit integer to
    a buffer and subsequently read floats. The user must assure that the correct type is
    being used. All `get` and `set` methods are *fail-fast*: reading or writing past the
    size results in assertion errors in a debug build and undefined behaviour in a release
    build.
    
    @par Literals
    - `buffer(size)` 

    @par Implements 
    - fa_copy_t
    - fa_destroy_t
    - fa_string_show_t

    @see 
    - [Data structures](@ref DataStructures)
 */
module Fa.Buffer
{
    import Fa;
    import Fa.Std;
    import Fa.Pair;
    import Fa.String;
    import Fa.Map;

    /** @typedef fa_buffer_t
        The buffer. 
     */
    type Buffer = opaque;

    /** Create a new buffer and initialize it to zero-bytes.
        @note
            O(n)
     */
    create : (Size) -> Buffer;

    /** Create a buffer wrapping the given memory region.

        @param ptr  Pointer to wrap.
        @param size Number of bytes to wrap.
        @param destroy_function Function to call upon destruction (optional).
        @param destroy_data Data closed over by the destroy function.
        @note
            O(1)
     */
    wrap : (Ptr, Size, Unary, Ptr) -> Buffer;
    
    /** Create a buffer wrapping the given memory region.
        The memory is released (using fa_free) when the
        buffer is destroyed.
    
        @param ptr  Pointer to wrap.
        @param size Number of bytes to wrap.
        @note
            O(1)
    */
    dwrap : (Ptr, Size) -> Buffer;
    
    /** Copy the given buffer.
        @note
            O(n)
     */
    copy : Buffer -> Buffer;

    /** Return a new buffer of the given size containing the contents
        of the given buffer padded with zero bytes at the end.
        @note
            O(n)
     */
    resize : (Size, Buffer) -> Buffer;

    /** Return a new buffer of the given size containing the contents
        of the given buffer padded with zero bytes at the end.
        
        The given buffer is destroyed. This function can reuse memory
        from the destroyed buffer and be considerably faster than @ref fa_buffer_resize.
        
        @note
            O(n)
     */
    dresize : (Size, Buffer) -> Buffer;

    /** Destroy the given buffer. If the reference count is greater than zero,
        the actual destruction is postponed until the reference count reaches
        zero. See @ref fa_buffer_take_reference and @ref fa_buffer_release_reference.
        
        @note
            O(n)
     */
    destroy : Buffer -> Void;
    
    /** Take a reference to the buffer, i.e. increase its reference count.
    */
    takeReference : Buffer -> Void;

    /** Release a reference to the buffer, i.e. decrease its reference count.
    */
    releaseReference: Buffer -> Void;    

    /** Return the size of the buffer.
        @note
            O(1)
     */
    size : Buffer -> Size;  

    /** Get the value of some meta-data attribute of the given buffer.
        @param buffer The buffer.
        @param string Attribute name (will be destroyed)
        @returns 
            The value (implementing @ref fa_dynamic).
     */
    getMeta : (Buffer, String) -> Ptr;

    /** Set the value of some meta-data attribute of the given buffer.
        @param buffer The buffer.
        @param string Attribute name.
        @param The value (implementing @ref fa_dynamic).
        
        @note
            Both the name and the value will be automatically destroyed
            when the buffer is destroyed or the key is removed from the map.
        
    */
    setMeta : (Buffer, String, Ptr) -> Void;

    /** Get all meta-data as a map from strings to values.
        @returns A @ref map of meta-data.
     */
    meta : Buffer -> Map;

    /** Get a value from the buffer.
        @note
            O(1)
     */
    get : (Buffer, Size) -> UInt8;

    /** Update a value in the buffer.
        @note
            O(1)
     */
    set : (Buffer, Size, UInt8) -> Void;

    /** Copy the first n bytes. */
    take : (Size, Buffer) -> Buffer;

    /** Copy from the given number of bytes. */
    drop : (Size, Buffer) -> Buffer;

    /** Efficient combination of take and drop. */
    takeDrop : (Size, Buffer) -> Pair;
    
    /** Split into a list of buffers containing at most n bytes. */
    split : (Buffer, Size, copy : Bool) -> List;

    /** Get a value from the buffer.
        @note
            O(1)
     */
    getInt16 : (Buffer, index : Size) -> Int16;
    
    /** Get a value from the buffer.
        @note
            O(1)
     */
    getInt32 : (Buffer, index : Size) -> Int32;
    
    /** Get a value from the buffer.
        @note
            O(1)
     */
    getInt64 : (Buffer, index : Size) -> Int64;
    
    /** Get a value from the buffer.
        @note
            O(1)
     */
    getFloat : (Buffer, index : Size) -> Float;
    
    /** Get a value from the buffer.
        @note
            O(1)
     */
    getDouble : (Buffer, index : Size) -> Double;

    
    /** Update a value in the buffer.
        @note
            O(1)
     */
    setInt16 : (Buffer, index : Size, Int16) -> Void;
    
    /** Update a value in the buffer.
        @note
            O(1)
     */
    setInt32 : (Buffer, index: Size, value : Int32) -> Void;
    
    /** Update a value in the buffer.
        @note
            O(1)
     */
    setInt64 : (Buffer, index: Size, value : Int64) -> Void;    
    
    /** Update a value in the buffer.
        @note
            O(1)
     */
    setFloat : (Buffer, index : Size, value : Float) -> Void;
    
    /** Update a value in the buffer.
        @note
            O(1)
     */
    setDouble : (Buffer, index : Size, value : Double) -> Void;    


    zip : (Buffer, Buffer) -> Buffer;
    unzip : Buffer -> Pair;

    /**
        Reads a buffer from a file.

        @param path
            Path to the file to read.
        @return
            A new buffer.
     */
    readRaw : (path : String) -> Buffer;
    
    /**
        Write a buffer to a file.

        @param path
            Path to the file to write.
     */
    writeRaw : (path : String, Buffer) -> Bool;
    
    /**
        Read an audio file.

        @param path
            Path to the file to read.
        @return
            A buffer or an error value.
     */
    readAudio : (path : String) -> Buffer;
    
    /**
        Read an audio file no bigger than a certain size.
    
        @param path
            Path to the file to read.
        @param max_size
            Max size of the internal buffer, in bytes. Note that
            audio is represented internally by doubles, so to contain
            a 16-bit mono WAV file if 1 MB, max_size will have to be
            at least 4 MB. A max_size of 0 means no limit.
        @param crop
            Determines what happens when the audio file is too big.
            If crop is true, data is read from the audio file until
            max_size is reached. If crop is false, an error
            is returned instead.
        @return
            A buffer, NULL (only when file is too big) or an error value.
    */
    readAudioMaxSize : (path : String, maxSize : Size, crop : Bool) -> Buffer;

    /**
        Write an audio file.

        @param path
            Path to the file to read.
        @param buffer
            Buffer to write.
        @return
            The null pointer or an error value.
     */
    writeAudio : (path : String,Buffer) -> Ptr; // Error?

    /** Resample the given buffer to the given rate (nullable).
        
        @param buffer
            Buffer to resample.
        @param sampleRate
            The new sample rate.
        @return
            A new buffer.
     */
    resample : (sampleRate : Double, Buffer) -> Buffer;

    /** Return the address of the buffer.

        This function is unsafe as it provides access to the buffer contents without
        ownership semantics.
        @note
            O(1)
     */
    unsafeAddress : Buffer -> Void*;
}

