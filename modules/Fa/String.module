
/** 
    Provides strings.
    
    A string is an immutable sequence of Unicode characters with single-ownership semantics.
    To convert a string from and to its ordinary C representation, use @ref fa_string_from_utf8,
    @ref fa_string_to_utf8, or the utility wrappers `string` and `unstring`.

    For example:
    
    ~~~c
    char*       cstr  = "Hello";
    string_t    str   = string(cstr);
    string_t    str2  = fa_string_dappend(str, string(" world!"));

    printf("%s\n", unstring(str2));
    ~~~

    @par Literals
    - `fa_string("foo")`

    @par Implements 
    - fa_equal_t
    - fa_order_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_string_show_t
    
    @see
    - [Data structures](@ref DataStructures)
    
 */
module Fa.String
{
    import Fa;

    /**
        @typedef fa_string_t
        An immutable Unicode string.

        @typedef fa_string_file_path_t
        A file path.
     */
    type String = opaque;

    /** Create an empty string.

        The returned string should be destroyed by the caller.
     */
    empty : () -> String;

    /** Create a single-char string.

        The returned string should be destroyed by the caller.
     */
    single : Char8 -> String;

    /** Create a string by repeating the given character.

        The returned string should be destroyed by the caller.
     */
    repeat : (Int, Char8) -> String;

    /** Copy the given string.

        The returned string should be destroyed by the caller.
     */
    copy : String -> String;

    /** Append the given strings, which are both copied.

        The returned string should be destroyed by the caller.
     */
    append : (String, String) -> String;

    /** Append the given strings, which are both destroyed.

        The returned string should be destroyed by the caller.
     */
    dappend : (String, String) -> String;

    /** Destroy the given string.
     */
    destroy : String -> Void;
    
    /** Return the number of characters in the given string.
     */
    length : String -> Int;
    /** Return the character at the given position in the string.
        @param pos
        @param str
     */
    charAt : (index : Int, String) -> Char16;

    /** String conversion interface.
    */
    type Show  = struct {
        show : (Ptr -> String)*
    };

    /** Generic string conversion.

        @param value
            Value to convert.
        @return
            A new string.
     */
    show : Ptr -> String;
	
    /** Generic destructive string conversion.

        @param value
            Value to convert. The value is destroyed.
        @return
            A new string.
     */
    dshow : Ptr -> String;
    
    /** Behaves like the identity function on strings and as [show](@ref fa_string_show)
        on all other value.
        @see [Show](@ref fa_string_show_t)
      */
    toString : Ptr -> String;
    
    /** Generic JSON conversion.
        @param a    Value implementing [Show](@ref fa_string_show_t) or [Dynamic](@ref fa_string_dynamic_t).
      */
    toJson : Ptr -> String;
    
    /** Generic JSON conversion.
        @param string   A JSON string.
      */
    fromJson : String -> Ptr;
    
    /** Encode the given string as UTF-8.

        @param  str String to encode.
        @return
        qA new encoded string.
     */
    toUtf8 : String -> Char8*;
    
    /** Encode a string as CP1252, also known as the standard Windows charset.

        @param  str String to encode.
        @return
            A new encoded string.
     */
    toCp1252 : String -> Char8*;

    /** Encode the given string as UTF-16.

        @param  str String to encode.
        @return
            A heap-allocated encoded string.
     */
    toUtf16 : String -> Char16*;

    /** Convert a string to a the string representation used by the platform.

        * On Mac OS X and iOS, `CFStringRef` is used.
     */
    toNative : String -> Ptr;

    /** Deencode a string from UTF-8.

        @param  str Encoded string.
        @return
            A new string.
     */
    fromUtf8 : Char8*   -> String;

    /** Deencode a string from CP1252, also known as the standard Windows charset.

        @param  str Encoded string.
        @return
            A new string.
     */
    fromCp1252 : Char8* -> String;

    /** Deencode a string from Mac OS X Roman, also known as the standard Windows charset.

        @param  str Encoded string.
        @return
            A new string.
     */
    fromMacRoman : Char8* -> String;

    /** Deencode a string from UTF-16.

        @param  str Encoded string.
        @return
            A new string.
     */
    fromUtf16 : Char16*  -> String;

    /** Convert a value of the string representation used by the platform to a string.

        * On Mac OS X and iOS, `CFStringRef` is used.
     */
    fromNative : Ptr    -> String;

    /** Return true iff the given string matches the given regular expression.
        @param expr   A regular expression string.
        @param string String to match.
     */
    matches : (String,String) -> Bool;  // regex, input

    /** Format an integer.
        @param format
            A printf-style format string.
        @param value
            Integer value.
        @return
            A new formatted string.
     */
    formatIntegral : (Char*, Long) -> String;

    /** Format a floating-point value.
        @param format
            A printf-style format string.
        @param value
            Numeric value.
        @return
            A new formatted string.
     */
    formatFloating : (Char*, Double) -> String;
    
    /** printf-style formatting.
        @param format
            A printf-style format string.
        @param ...
            Values matching the format string.
        @return
            A new formatted string.
    */
    format : (Char*, ...) -> String
    
    /** Write the number of allocated regions to STDOUT, with an optional string prepended.
    */
    regionCount : (Char*) -> Void;
}

