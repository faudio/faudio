
/**
    Provides external streams.
    
    - *Sources* produce sequences of data (bytes, characters, floats etc)
    - *Sinks* consume sequences of data (bytes, characters, floats etc)
    - *Filters* transform sequences of data in an effectful manner
    - Both *sources* and *sinks* can be composed with filters.
    
    @since
        2.9
 */
module Fa.Io
{
    import Fa;
    import Fa.Buffer;
    import Fa.Atomic.RingBuffer;

    /** Callback to receive data.
    
        Argument is either a buffer contaning a new chunk of data or `NULL`, indicating
        that the data source has been drained.
        
        The buffer may be of any size (including zero) and is valid for the duration of
        the callback. To retain data beyond this call the buffer should be copied, or its
        data extracted and written to some other destination.
     */
    type Callback = ((Ptr, Buffer) -> Void)*;

    /** Callback to recive callback to receive data.
     */
    type ReadCallback = ((Ptr, Callback, Ptr) -> Void)*;


    /** Implements the filter interface. */
    type Filter = opaque;
    /** Implements the filter interface (push calls have no effect, pull ignores the source). */
    type Source = opaque;
    /** Implements the filter interface (pull calls have no effect, push ignores the sink). */
    type Sink = opaque;

    /** Generic I/O filter interface.
     */
    type FilterInterface = struct {

        pull : ((Ptr, Source, Callback, Ptr) -> Void)*,
        // TODO Passing NULL means close stream
        push : ((Ptr, Sink, Buffer) -> Void)*
    };
    
    /** Pull data from a source. */
    pull : (Source, Callback, Ptr) -> Void;
    /** Push data to a sink. */
    push : (Sink, Buffer) -> Void;
    /** Pull data from a source after passing it through the given filter. */
    pullThrough : (Filter, Source, Callback, Ptr) -> Void;
    /** Push data to a sink after passing it through the given filter. */
    pushThrough : (Filter, Sink, Buffer) -> Void;

    /** Create filter that passes through its input unchanged.
        Forms a monoid with identity so
        
        ~~~
        compose(f, compose (g, h)) = compose(compose(f, g), h)
        compose(identity, f) = f
        compose(g, identity) = g
        ~~~
        
        */
    identity : () -> Filter;
    /** Compose two filters. */
    compose  : (Filter, Filter) -> Filter;

    /** Apply a filter to the output of a source. */
    apply       : (Source, Filter) -> Source;
    /** Apply a filter to the input of a sink. */
    coapply : (Filter, Sink) -> Sink;

    /** Create a simple stateful  filter.
        The callback is invoked on push and the read callback on pull.
     */
    createSimpleFilter : (Callback, ReadCallback, Ptr) -> Filter;

    /** Create a filter that writes data passed through it to the given sink. */
    split : Sink -> Filter;
    /** Create source that reads from a file. */
    readFile : (path : String) -> Source;
    /** Create source that reads from a file. */
    readFileBetween : (path : String, start : Ptr, end: Ptr) -> Source;
    /** Create source that reads from a file. */
    readAudioFile : (path : String) -> Source;
    /** Create source that reads from a file. */
    readAudioFileBetween : (path : String, start : Ptr, end: Ptr) -> Source;
    /** Create sink that writes to a file. */
    writeFile : String -> Sink;
    /** Create source that reads from the standard input. */
    standardIn : () -> Source;
    /** Create sink that writes to the standard output. */
    standardOut : () -> Sink;

    /** Create a source from a buffer. */
    fromBuffer : Buffer -> Source;
    /** Create a source from a ring buffer. */
    fromRingBuffer : RingBuffer -> Source;

    /** Create an encoder to the `ogg/vorbis` format.
        @warning
            For now requires input to be mono, 44100, 64-bit floating.
      */
    createOggEncoder : (sampleRate : Long, channels : Long) -> Filter;

    /** Continously pull data from the given source and push it into the sink.

        This function blocks until the given source is exhausted. If this
        never happens, this function blocks forever.
     */
    run : (Source, Sink) -> Void;
    
    /** Continously pull data from the given source and store it into a buffer.

        This function blocks until the given source is exhausted. If this
        never happens, this function blocks forever, or until the buffer
        cannot grow because there is no more memory.
     */
    pullToBuffer : (Source) -> Buffer;
}

