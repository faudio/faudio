
/** 
    A bounded lock-free queue of raw data.
    
    Each ring buffer single-ownership semantics. The `close` method does not destroy the ring buffer,
    but provides a way for the writer to notify the reader of the end of the sequence.
    
    The *size* of a buffer can never change.
    
    @par Literals
    - `atomic_ring_buffer(size)` 

    @par Implements 
    - fa_destroy_t
    - fa_string_show_t

    @see 
    - [Data structures](@ref DataStructures)

 */
module Fa.Atomic.RingBuffer
{            
    import Fa;
    
    type RingBuffer = opaque;

    /** Create a ring buffer of the given size.
     */
    create : Size -> RingBuffer;

    /** Destroy the given ring buffer. If the reference count is greater than zero,
        the actual destruction is postponed until the reference count reaches
        zero. See @ref fa_buffer_take_reference and @ref fa_buffer_release_reference.
        
        @note
            O(n)
     */
    destroy : RingBuffer -> Void;

    /** Destroy the given ring buffer.
     */
    size : RingBuffer -> Size;  

    // remaining : (RingBuffer, Size) -> Size;
    // 
    /** Return `used/size` as a fraction in the range `0-1`.
    */
    filled : RingBuffer -> Double;


    /** Notify downstream sinks of end of data.
        Subsequent calls to `write` will fail.
     */
    close : RingBuffer -> Void;

    /** Whether the buffer have been closed by an upstream source.
     */
    isClosed : RingBuffer -> Bool;
    
    /** Take a reference to the buffer, i.e. increase its reference count.
    */
    takeReference : Buffer -> Void;

    /** Release a reference to the buffer, i.e. decrease its reference count.
    */
    releaseReference: Buffer -> Void;    
    
    /** If true, a subsequent call to `read` with a type of the given
        size is guaranteed to succeed.
     */
    canRead : (RingBuffer, Size) -> Bool;

    /** If true, a subsequent call to `write` with a type of the given
        size is guaranteed to succeed.
     */
    canWrite : (RingBuffer, Size) -> Bool;

    /** Read a single byte value.
     */
    read        : (RingBuffer, UInt8*) -> Bool;

    /** Read a single float value.
     */
    readFloat   : (RingBuffer, Float*) -> Bool;

    /** Read a single double value.
     */
    readDouble  : (RingBuffer, Double*) -> Bool;
    
    /** Read a single long value.
     */
    readLong  : (RingBuffer, Long*) -> Bool;

    /** Write a single byte value.
     */
    write       : (RingBuffer, UInt8) -> Bool;
    
    /** Write a single float value.
     */
    writeFloat  : (RingBuffer, Float) -> Bool;

    /** Write a single double value.
     */
    writeDouble : (RingBuffer, Double) -> Bool;
    
    /** Write a single long value.
     */
    writeLong : (RingBuffer, Long) -> Bool;
    
}

