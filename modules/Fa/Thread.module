
/**
    Provides threads.

    We provide threads and mutexes. For non-blocking constructs, see the @ref FaAtomic modules.

    @par Implements 
    - fa_equal_t  (Thread only)
    - fa_order_t  (Thread only)
    - fa_string_show_t (both)
    - fa_destroy_t (Mutex only)
    
    Threads do not implement destroy, use join or detach instead.
    
 */
module Fa.Thread
{
    import Fa;
    import Fa.Std;
    import Fa.Time;

    /** The abstract type of threads.
     */
    type Thread = opaque;
    
    /** The abstract type of mutexes.
     */
    type Mutex = opaque;
    
    /** Create a new thread executing the given function asynhronously.

        Threads have single-ownership semantics and must be finalized by passing it
        to a destructive function.

        @param func Function to execute.
        @param data Value to be passed to the function.
        @param name A name for the thread, printed to the log (optional, destroyed).
        @return     A new thread executing concurrently with the current thread.
     */
    create : (Nullary, Ptr, name : String) -> Thread;

    /** Destroy a thread, and return after its associated function has returned.
        @param thread Thread to join (destroyed).
      */
    join : Thread -> Void;

    /** Destroy a thread and return directly. The associated function may continous executing
        in the background.
        @param thread Thread to detach (destroyed).
      */
    detach : Thread -> Void;

    /** Convert a thread to a the underlying thread type used by the platform.

        * On Mac OS X and iOS, `pthread_t` is used.
     */
    toNative : Thread -> Ptr;

    /** Return the main thread.
      */

    main : () -> Thread;

    /** Return the current thread.
      */

    current : () -> Thread;
    
    /** Sleep the current thread for the given time.
     */
    sleep : Milliseconds -> Void;

    /** Create a mutex.

        Mutexes have single-ownership semantics and must be finalized by passing it
        to a destructive function.
     */
    createMutex : () -> Mutex;

    /** Destroy a mutex.
     */
    destroyMutex : Mutex -> Void;

    /** Acquire the lock of a mutex.
     */
    lock : Mutex -> Bool;

    /** Try acquiring the lock of a mutex.
     */
    tryLock : Mutex -> Bool;

    /** Release the lock of a mutex.
     */
    unlock : Mutex -> Bool;
}

