
/**
    Provides real-time audio.
    
    These devices run processors on the input and output
    the underlying system, typically physical audio interfaces. A running audio
    computation is represented by a *stream*. Access to the current device setups
    is provided by *sessions*.

    @par Implements
    - fa_equal_t
    - fa_destroy_t (sessions and streams)
    - fa_string_show_t

    @see
    - @ref Devices
 */
module "transient" Fa.Audio.Session
{
    import Fa.Action;
    import Fa.Time;
    import Fa.Clock;
    import Fa.Error;

    /** An audio session.
     */
    type Session = opaque;
    
    /** A callback to receive audio sessions.
     */
    type SessionCallback = ((Ptr, Session) -> Session)*;
    
    /** A callback to be invoked upon changes to the audio setup.
     */
    type StatusCallback = Nullary;
    
    /** Type specifying whether to use exclusive mode (WASAPI only)
     */
    type ExclusiveMode = enum {
        emNever,
        emAlways,
        emTry
    }

    /** Begin a new audio session.

         @return
             A new session (errable).
         @par Errors
             Returns an error if the session could not be started.
      */
    beginSession : () -> Session;
    
    
    /** End the given session.

        @param session
            Session to end.
     */
    endSession : Session -> Void;
    
    /** Begin a new session, and retain it for the duration of a call to the given function.

        The given function will be called once after the session has created. The session
        will be ended after the callback function has returned. If an error occurs while
        starting the session, the error callback is invoked in place of the session callback.

        @param callback                     Function to receive the sesssion.
        @param error_callback               Function to receive eventual errors.
        @param error_data, session_data     Data closed over by the callbacks.
     */
    withSession : (
        SessionCallback, Ptr,
        Callback, Ptr) -> Void;

    /** Set an audio parameter value.
    
        This function should usually be called once, directly after the session has been
        created, and will affect all streams created after the invocation.
        
        Note the dependency between sample-rate, latency and vector size: Normally you want
        `(1/sr)*vs < min(inputLatency, outputLatency)` to hold.

        ### Supported parameters ###
        
        Name                 | Description
        ---------------------|------------------------------------------------------------------------
        `latency`            | Suggested latency for both input and output in seconds (integer or floating-point).
        `input-latency`      | Suggested latency for both input and output in seconds (integer or floating-point).
        `output-latency`     | Suggested latency for both input and output in seconds (integer or floating-point).
        `sample-rate`        | Suggested sample rate in Hertz (floating-point).
        `vector-size`        | Suggested internal vector size (integer).
        `scheduler-interval` | Scheduler update interval in milliseconds (integer).
        `exclusive`          | Use exclusive mode if available (boolean or integer). This will force `faudio` to claim exclusive access to each audio device it uses.
        
        @param name     Name of parameter to set. Consumed.
        @param value    A [reference](@ref ValueReferences) to the value to set. Consumed.
        @param session  Session in which to set the parameter.
     */
    setParameter : (String, Ptr, Session) -> Void;

    /** Get all currently active audio sessions. Note that at most one audio session
        can be active at the same time, so this function returns a list of zero or
        one elements.
        
        @returns A list of @ref fa_audio_session_t.
     */
    currentSessions : () -> List;
    
    /** End all currently active audio sessions.
        
        @returns The null pointer if successful, or an error value otherwise.
     */
    endAllSessions : () -> Ptr;

    /** Get all active audio devices of the given session.

        @param session   The session.
        @return
            A list of @ref fa_audio_device_t.
     */
    all : Session -> List;      // [Device]
}