
/**
    Provides real-time audio.
    
    These device run processors on the input and output
    the underlying system, typically physical audio interfaces. A running audio
    computation is represented by a *stream*. Access to the current device setups
    is provided by *sessions*.

    @par Implements
    - fa_equal_t
    - fa_destroy_t (sessions and streams)
    - fa_string_show_t

    @see
    - @ref Devices
 */
module "transient" Fa.Audio.Stream
{
    import Fa.Action;
    import Fa.Time;
    import Fa.Clock;
    import Fa.List;
    import Fa.Pair;
    import Fa.Error;
    import Fa.Signal;
    import Fa.Action;
    import Fa.Clock;
    import Fa.Audio.Device;
        
    /** An audio stream.
     */
    type Stream  = opaque;

    /** A callback to be invoked whenever a message is received.
        
        Received a `(Name, Msg)` pair, where `Name` is `Action.Name` and `Msg` a
        copyable, showable value. 
     */
    type MessageCallback = Binary;

    /** A callback to receive audio streams.
     */
    type StreamCallback = ((Ptr, Stream) -> Stream)*;

    /**
        Open a stream on the given devices.

        @param input, output    Devices to provide data source and sink.
        @param processor        Processor to run over the devices.
        @return                 A new stream (errable).
        @par Errors
            Returns an error if the session could not be started.
     */
    openStream : (Device, Device, Proc, Ptr) -> Stream;
    
    /**
        Close the given stream.
        @param session          Stream to close.
     */
    closeStream : Stream -> Void;
    
    /**
        Run a stream on the given devices.

        @param input
            Input device.
        @param input
            Output device.
        @param processor_callback
            Function to receive incoming signals and return output signals.
        @param processor_data
            Pointer passed to processor callback.
        @param stream_callback
            Function to receive the stream if successful.
        @param stream_data
            Pointer passed to stream callback.
        @param error_callback
            Function to errors if unsuccessful.
        @param error_data
            Pointer passed to error callback.
     */
    withStream : (
        Device, Device, Proc, Ptr,
        StreamCallback, Ptr,
        Callback, Ptr
        ) -> Void;

    /** Return the devices associated with the given stream.
        @param stream   The stream.
        @return A list of @ref fa_audio_device_t
     */
    devices : Stream -> List;

    /** Return the clock associated with a given stream.
        @param stream The stream.
        @return A clock.
     */
    getClock : Stream -> Clock;
    
    /** Return the clock associated with a given stream.
        @param stream The stream.
        @return A clock.
        @deprecated Use @ref fa_audio_get_clock.
     */
    streamClock : Stream -> Clock;

    /** Set the speed of the virtual time for the given streem.

        By default, time runs at speed `1.0`, meaning that the stream clock returns the actual processing time.
        More generally, the time returned by an audio stream clock is the integral of its speed over time.
        
        @note
            This only affects scheduling, audio processing always run at a fixed sample rate.

        @param speed
            Speed to set.
        @param stream
            The stream.
      */
    setSpeed : (speed : Double, stream : Stream) -> Void;

    /** Register a callback to be invoked when a message is received.

        Multiple callbacks can be registered this way. All registered callbacks
        are associated with a stream and will be removed when the stream is stopped
        or its associated session ends.

        @param callback
            Callback to register.
        @param callback_data
            Data closed over by the callback function.
        @param session
            Stream on which to register the callback.
     */
    addMessageCallback : (callback : MessageCallback, callbackData : Ptr, stream : Stream) -> Void;

    /**
        Schedule an action on the stream.
        
        The action will be run as soon as the time of the stream (as
        reported by its clock) is greater than or equal to the given due time.
     */
    schedule : (time : Time, action : Action, stream : Stream) -> Void;

    /**
        Schedule an action on the stream.

        The action will be run when the given time has passed, relative to
        when this function was invoked. This is a convenience function implemented
        in terms of `fa_audio_schedule` and `fa_clock_time`, using the current
        stream clock.
     */
    scheduleRelative : (time : Time, action : Action, stream : Stream) -> Void;
    
    /**
        Schedule an action to be run immediately.

        Can be used with non-compound, non-do actions.
        As a special case, non-nested compound actions can also
        be passed, note however that the contained actions
        will all be executed immediately, regardless of their
        specified timing. The order is still guaranteed though.
    
        Note also that actions scheduled this way may be run before actions
        scheduled using fa_schedule_relative(fa_now(), ...)
     */
    scheduleNow : (Action, Stream) -> Void;
    
    /**
        Return info of the stream, in form of a map.
    
        The map should be destroyed by the caller.
    */
    streamGetInfo : (Stream) -> Map;
}