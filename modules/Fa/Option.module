
/** 

    Provides a basic option parser.
    
    ## Example

    ~~~
    fa_option_t options[] = {
        { "h", "help",            "Show help info",             fa_option_parse_string },
        { "x", "value-with-def",  "Show help info",             fa_option_parse_int    },
        { "n", "number-of-cores", "Number of cores\n                                   "
                                  "Very interesting parameter", fa_option_parse_int    }
    };

    int main(int argc, char const *argv[])
    {
        fa_option_show_all(options, "Usage: fa_options\n"
                                    "       fa_options [FILES]\n");
                
        fa_unpair(fa_option_parse_all(options, argc, (char**) argv), options, arguments) 
        {
            fa_print_ln(options);   // {"foo": 1, "bar": 2}
            fa_print_ln(arguments); // [1,2,3]
        }
    }
    ~~~    
    
 */
module Fa.Option
{
    import Fa;
    import Fa.Std;
    import Fa.String;
    import Fa.Pair;

    type Parser = (Char * -> Ptr)*;

    type Option = struct {
        shortName       : Char*,
        longName        : Char*,
        description     : Char*,
        parser          : Parser,
        defaultValue : Char*
    };

    /** Parses integers. */
    integral : (input : Char *)           -> Ptr;

    /** Parses floating-point numbers. */
    floating : (input : Char *)           -> Ptr;

    /** Parses strings. */
    string : (input : Char *)             -> Ptr;

    /** Parses strings. */
    nativeString : (input : Char *)       -> Ptr;

    /** Always fails. */
    failure : (input : Char *)            -> Ptr;    
    
    /** Parse options according to the given specification (see example above).
        
        @returns
            A pair where the first component is a @ref fa_map_t of `(name, value)`
            pairs, and the second component is a list of remaning arguments.    
    */
    parseAll : ( options : Option*, 
                 argc : Int, 
                 argv : Char** ) -> Pair;

    /** Show options according to the given specification (see example above) on the standard output.
     */
    showAll : ( options : Option*, header : Char*) -> Void;

    /** Parse options according to the given specification (see example above).
        
        @returns
            A pair where the first component is a @ref fa_map_t of `(name, value)`
            pairs, and the second component is a list of remaning arguments.    
    */
    parse : ( numOptions : Int, 
                options : Option*, 
                argc : Int, 
                argv : Char** ) -> Pair;
    
    /** Show options according to the given specification (see example above) on the standard output.
     */
    show : ( numOptions : Int, options : Option*, header : Char*) -> Void;
}