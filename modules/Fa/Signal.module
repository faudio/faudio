
/**
    Provides signals.

    @par Implements
    - fa_copy_t
    - fa_string_show_t
    - fa_number_t
    - fa_destroy_t
    
 */
module Fa.Signal
{
    import Fa;    
    import Fa.Pair;
    import Fa.Time;
    import Fa.Buffer;
    import Fa.Atomic.RingBuffer;
    
    /** The abstract type of signals.
    
        Each signals denotes a function of time.
     */
    type Signal = opaque;

    /** Like fa_unary_t, but speficied on signals.
    */
    type UnarySignal    = ((Ptr, Signal) -> Signal)*;

    /** Like fa_unary_t, but speficied on doubles.
    */
    type UnaryDouble    = ((Ptr, Double) -> Double)*;

    /** Like fa_binary_t, but speficied on doubles.
    */
    type BinaryDouble   = ((Ptr, Double, Double) -> Double)*;


    /**
        Returns a signal representing the elapsed time in seconds.
        
        @par Semantic $$y(t) = t$$.
     */
    time : () -> Signal;

    /**
        Returns a signal representing white noise.
        
        @par Semantic $$y(t) = random(-1,1)$$.
     */
    random : () -> Signal;
    
    /**
        Returns a signal representing the given constant value.

        @param value
            Constant value.
        @par Semantic $$y(c)(t) = c$$.
     */
    constant : Double -> Signal;

    /**
        Returns a signal that applies the given function to output of the given signal.
        
        @param name          
            Name of resulting processor. This is used for printing and some optimization techniques.
        @param function, data
            Function to lift and pointer to data closed over by the function.
        @param signal
            Signal to apply to the resulting processor.
        @return
            Result of appying the given processor to the given signal.

        @par Semantic $$y(f,a)(t) = f(a(t))$$.
     */
    lift : ( String, UnaryDouble, Ptr, Signal )            -> Signal;

    /**
        Returns a signal that applies the given function to output of the given signals.
        
        Returns a signal that applies the given function to output of the given signal.
        
        @param name          
            Name of resulting processor. This is used for printing and some optimization techniques.
        @param function, data
            Function to lift and pointer to data closed over by the function.
        @param signal1, signal2
            Signals to apply to the resulting processor.
        @return
            Result of appying the given processor to the given signals.

        @par Semantic $$y(f,a,b)(t) = f(a(t), b(t))$$.
     */
    lift2 : ( String, BinaryDouble, Ptr, Signal, Signal )   -> Signal;

    /**
        Returns a signal that closes over the given signal function in a feedback loop.

        The given signal function receives its own output with an implicit one-sample delay.
        
        @par Semantic $$y(f)(t) = f(y(t-1))$$.
     */
    loop : ( UnarySignal, Ptr )                            -> Signal;

    /**
        Returns a signal that delays the given signal by the given number of 
        samples. 
                
        @par Semantic $$y(n,a)(t) = \\begin{cases} 0 & \mbox{if} (t-n) < 0   \\\\   a(t-n) & \mbox{if} (t-n) \\geq 0 \\end{cases}$$.

     */
    delay : ( Int, Signal )                                 -> Signal;

    // insert : ( String, Int, Int, Int, Int, Signal ) -> Signal;


    type State = struct {
        buffer : Double*,
        dummy : Ptr,
        count : Int,
        rate : Double
    };

    /** Type of names.
     */
    type Name    = String;

    /** Type of messages.
     */
    type Message = Ptr;
    
    /** A callback to receive messages.
     */
    type MessageCallback = ((Ptr, Name, Message) -> Void)*;

    type CustomProcessor = struct {
        before : ((Ptr,Int,State*) -> Ptr)*,
        after : ((Ptr,Int,State*) -> Ptr)*,
        render : ((data : Ptr, channelOffset : Int, numberOfSamples : Int, state : State*) -> Ptr)*,

        receive : ((Ptr,Name,Message) -> Ptr)*,
        send : ((Ptr,MessageCallback, Ptr) -> Ptr)*,

        destroy : (Ptr -> Ptr)*,
        channelOffset : Int64,
        data : Ptr
    };
    
    /** Add a custom processor to be executed with the given signal.
        A custom processor is simply a routine invoked on the DSP thread.

        Adding a custom processor to a signal does *not* affect its input or output, the
        user must allocate dedicated buses for this purpose using @ref fa_signal_input_local
        or @ref fa_signal_output_local.
        
        If a processor handles multichannel audio, simply add the processor to *one* of
        the output signals, implying that all channels of the output must always be used
        whether their output is needed or not (see also `fa_signal_former`).

        @warning
            This is a low-level function used internally in faudio for implementing new
            I/O backends, plug-in formats. If you simply want to lift a pure function into
            the audio thread, see `fa_signal_lift`.

        @deprecated
            Use XXX instead.
     */
    custom : (CustomProcessor*, Signal) -> Signal;

    /** An input signal, reading from the global bus of the given number.
        @param channel
            Channel number.
     */
    input : ( channel : Int ) -> Signal;

    /** An output signal, writing to the global bus of the given number.

        Returns a signal that is identical to original signal except that it
        enforces output.

        @param delay
            Delay of output in frames.
        @param channel
            Channel number.
        @param input
            Signal to output.
        @returns
            The original signal, which must be run for output to take place.
     */
    output : ( delay : Int, channel : Int, input : Signal ) -> Signal;

    /** An output signal, writing to the global bus of the given number.

        Returns a signal that is identical to original signal except that it
        enforces output.

        @proc
            Processor to route to.
        @param channel
            Channel number (local).
     */
    localInput : ( proc : CustomProcessor*, channel : Int ) -> Signal;

    /** The primitive output signal, writing to the bus of the given number
        and returning the written value.

        @param proc
            Processor to route from.
        @param delay
            Delay of output in frames.
        @param channel
            Channel number.
        @param input
            Signal to output.
        @returns
            The original signal, which must be run for output to take place.
     */
    localOutput : ( proc : CustomProcessor*, delay : Int, channel : Int, input : Signal ) -> Signal;

    /** Returns a signal that evaluates both of the given signal, and the result of the first.
     */
    former : (Signal, Signal) -> Signal;

    /** Returns a signal that evaluates both of the given signal, and returns the result of the second.
     */
    latter : (Signal, Signal) -> Signal;


    // Running

    /** Run the given signal for *n* samples, printing the values to `stdout`.
     */
    print : ( Int, List, Signal ) -> Void;    

    /** Run the given signal for *n* samples, writing the results to the given buffer.

        The given pointer must point to a buffer of at least `samples * sizeof(double)`.

        @param samples
            Number of samples to generate.
        @param controls
            List of control values (must be pairs of @ref fa_time_t and @ref fa_action_t).
            Optionally, a null pointer is interpreted as the empty list.
        @param signal
            Signal to run.
        @param buffer
            Buffer to receive result.
     */
    run : ( Int, List, Signal, Double* ) -> Void;

    /** Run the given signal, writing the results to a freshly created @ref buffer_t.
        The resulting buffer must be freed by the caller.

        @param samples
            Number of samples to generate.
        @param controls
            List of control values (must be pairs of fa_time_t and fa_action_t).
            Optionally, a null pointer is interpreted as the empty list.
        @param signal
            Signal to run.
     */
    runBuffer : ( Int, List, Signal ) -> Buffer;

    /** Run the given signal, writing the results to the given file.

        @param samples
            Number of samples to generate.
        @param controls
            List of control values (must be pairs of fa_time_t and fa_action_t).
            Optionally, a null pointer is interpreted as the empty list.
        @param signal
            Signal to run.
        @param path
            Name of file to write.
     */
    runFile : ( Int, List, Signal, String ) -> Ptr;

    trigger : ( name : String, init : Double ) -> Signal;

    /**
        Index a buffer at the given sample.

        This signal writes raw buffer indices, so to read a buffer *b*
        of *n* channels at channel *c* and sample *n*, do `record(b, i*n+c)`.

        The read is performed modulo `length(b)/8`, so negative or larger values wrap
        around. Thus you can loop a buffer by simply incrementing the index or play it
        backwards by decrementing.

        @param buffer
            Buffer to read from.
        @param index
            Sample index to read from.
     */
    play : (Buffer, Signal) -> Signal;
    
    /** A signal that plays multiple audio buffers.
        
        Control the signal by sending pairs to it (using @ref fa_action_send).
        The pair should consist of a slot number and a command, where the command can be either of:
        - A @ref fa_buffer_t -- the buffer is loaded into the signal
        - A @ref fa_file_buffer_t -- the file buffer is loaded into the signal
        - The string "play" -- start playback
        - The string "stop" -- stop playback
        - The string "free" -- unload the current buffer
        - A (wrapped) number -- move to the corresponding frame
        - A pair, consisting of the string "volume" and a float -- set volume for the slot (1.0 = reference volume)
        - A pair, consisting of the string "pan" and a float -- set pan for the slot (-1.0 to 1.0)
        
        @param name
            A name to identify the signal, use with @ref fa_action_send
        @param count
            Number of slots. Each slot is able to play one buffer at a time.
        @return
            A pair of @ref fa_signal_t (left and right output).
        
        @note
            Use @ref fa_action_send_retain rather than @fa_action_send to pass
            buffers to the signal, otherwise the buffer will be destroyed by
            the scheduler. (TODO: This will currently leak the pair and the number)
        @note
            Only one buffer or file_buffer can be loaded in each slot at a time.
            Loading a new buffer automatically unloads the previous.
        @note
            When a buffer or file_buffer is loaded, a reference is taken, which is
            released when the buffer is unloaded. Therefore it is safe calling
            @ref fa_destroy on the buffer even after scheduling.
    */
    playBuffers : (name : String, count : Int)
    
    /** A signal that plays audio buffers, one at a time.
        
        Control the signal by sending one of the following to it (using @ref fa_action_send):
        - A @ref fa_buffer_t -- the buffer is loaded into the signal
        - The string "play" -- start playback
        - The string "stop" -- stop playback
        - The string "free" -- unload the current buffer
        - A (wrapped) number -- move to the corresponding frame
        - A pair, consisting of the string "volume" and a float -- set volume for the slot (1.0 = reference volume)
        - A pair, consisting of the string "pan" and a float -- set pan for the slot (-1.0 to 1.0)
        
        @param name
            A name to identify the signal, use with @ref fa_action_send
        @return
            A pair of @ref fa_signal_t (left and right output).
        
        @note
            This is a convenience wrapper equivalent to fa_signal_play_buffers(name, 1)
            See @fa_signal_play_buffers for further information.
        
    */
    playBuffer : (name : String) -> Pair;

    /**
        Index a buffer at the given sample and returns the written value.

        @param buffer
            Buffer to write to.
        @param index
            Index to write to. If negative or larger than buffer size, nothing is written.
        @param value
            Value to write.
     */
    record : (Buffer, Signal, Signal) -> Signal;

    recordExternal : (String, Signal) -> Signal;
    recordExternal2 : (String, Pair) -> Pair;

    /** Addition lifted to signals. */
    add : (Signal, Signal) -> Signal;

    /** Subtraction lifted to signals. */
    subtract : (Signal, Signal) -> Signal;

    /** Multiplication lifted to signals. */
    multiply : (Signal, Signal) -> Signal;
    
    /** The exponential function lifted to signals. */
    power : (Signal, Signal) -> Signal;

    /** Division function lifted to signals. */
    divide : (Signal, Signal) -> Signal;
    
    /** The modulo function lifted to signals. */
    modulo : (Signal, Signal) -> Signal;
    
    /** The absolute value of a signal. */
    absolute : Signal           -> Signal;
    
    /** Negate a signal, treating 0 as false and all other values as true. */
    not : () -> Signal;
    /** Logical *and* of two signals, treating 0 as false and all other values as true. */
    and : (Signal, Signal) -> Signal;
    /** Logical *or* of two signals, treating 0 as false and all other values as true. */
    or : (Signal, Signal) -> Signal;
    /** Logical *exclusive or* of two signals, treating 0 as false and all other values as true. */
    xor : (Signal, Signal) -> Signal;
    
    /** Equality of two signals, generating 1 if equal and 0 otherwise. 
        Beware of floating-point equality. You should only use small integer numbers. */
    equal : (Signal, Signal) -> Signal;
    
    /** Compare two signals `x` and `y`, generating 1 if `x < y` and 0 otherwise. */
    lessThan : (Signal, Signal) -> Signal;    
    /** Compare two signals `x` and `y`, generating 1 if `x > y` and 0 otherwise. */
    greaterThan : (Signal, Signal) -> Signal;
    /** Compare two signals `x` and `y`, generating 1 if `x <= y` and 0 otherwise. */
    lessThanEqual : (Signal, Signal) -> Signal;
    /** Compare two signals `x` and `y`, generating 1 if `x >= y` and 0 otherwise. */
    greaterThanEqual : (Signal, Signal) -> Signal;
    
    /** The acos function lifted to signals. */
    acos : (Signal) -> Signal;
    /** The asin function lifted to signals. */
    asin : (Signal) -> Signal;
    /** The atan function lifted to signals. */
    atan : (Signal) -> Signal;
    /** The cos function lifted to signals. */
    cos : (Signal) -> Signal;
    /** The sin function lifted to signals. */
    sin : (Signal) -> Signal;
    /** The tan function lifted to signals. */
    tan : (Signal) -> Signal;
    /** The exp function lifted to signals. */
    exp : (Signal) -> Signal;
    /** The natural logarithm of a signal. */
    log : (Signal) -> Signal;
    /** The common logarithm of a signal. */
    log10 : (Signal) -> Signal;

    /** The square root of a signal. */
    sqrt : Signal           -> Signal;
    /** The minimum of two signals. */
    min : (Signal, Signal) -> Signal;
    /** The maximum of two signals. */
    max : (Signal, Signal) -> Signal;
    /** The modulo of a signal. */
    fmod : (Signal, Signal) -> Signal;
    /** The remainder of a signal. */
    remainder : (Signal, Signal) -> Signal;
    /** Round the value of a signal towards negative infinity. */
    floor : (Signal, Signal) -> Signal;
    /** Round the value of a signal towards positive infinity. */
    ceil : (Signal, Signal) -> Signal;

    /** A signal that counts samples.
        Generates the sequence `[0,1..]`.
     */
    counter : () -> Signal;

    /** A signal which is one when the number of samples is divisible by the given
        number, and zero otherwise.
        
        For example if the sample rate is 44100, `fa_signal_impulses(44100)` generates an impulse every second.
     */
    impulses : (samples : Size) -> Signal;
                           
    // isVariable : Signal -> Bool;
    // isConstant : Signal -> Bool;
    // areConstant : List -> Bool; // [Signal]
    // signalNodeCount : Signal -> Int;
    // signalTree : Signal -> Tree String;
    // requiredInputs : Signal -> Int;
    // requiredBuses : Signal -> Int;
    // requiredDelay : Signal -> Int;
    // optimize : Signal -> Signal;
    // optimize1 : Signal -> Signal;

    /** Run a signal through an external VST plug-in.
    
        @param name
            Name of plug-in.
        @param path
            Path of plug-in.
        @param inputs
            Inputs signals.
        @return
            A list of @ref fa_signal_t (outputs).
        @warning
            Experimental.    
     */
    vst : (String, String, List) -> List;
    
    showVstGui : (String, Ptr) -> Void;

    /** Returns a pair of signals from the `DLSMusicDevice`.
        You can send messages to it using the name `DLS`.
        
        @return
            A pair of @ref fa_signal_t (outputs).
        @note
            This function is only available on Mac OS X and will
            fail ungracefully on other platforms.
     */
    dls : (name : String) -> Pair;
    

    /** Returns a pair of signals from FluidSynth (if available).
        You can send messages to it using the name `Fluid`.
        
        @param path
            Path to a SoundFont.
        @return
            A pair of @ref fa_signal_t (outputs).
        @note
            This function is only available on Windows and will
            fail ungracefully on other platforms.
        @warning
            Experimental.    
     */
    synth : (name : String, soundfontPath : String) -> Pair;

    /** Convert the signal to a tree represented as set of
        nested pairs of type `(String,[...])`.
        
        This is useful for debugging the signal graph.
     */
    toTree : Signal -> Pair; // (String,[...])

    /** Convert a tree on the form `(String,[...])` to a string,
        suitable for printing.
     */
    drawTree : Pair -> String;
    
    /** Simplify a signal by removing all non-primitive constructors.
        The returned signal must be freed by the caller.

        @returns
            A simplified signal. If the given signal was already simplified,
            a copy of that signal (as per @ref fa_copy) is returned.
     */
    simplify : Signal -> Signal;

    /** Optimize a signal (destructive).

        @returns
            A simplified signal. If the given signal was already simplified,
            a copy of that signal (as per @ref fa_copy) is returned.
     */
    doptimize : Signal -> Signal;

    /** Verify that the given signal can actually be run (destructive).
        Should be called *after* simplify and optimize.

        @returns
            A simplified signal. If the given signal was already simplified,
            a copy of that signal (as per @ref fa_copy) is returned.
     */
    dverify : Signal -> Signal;
    

    impulse : () -> Signal;
    line : Double -> Signal;
    

    /** @deprecated Renamed to @ref fa_signal_local_input. */
    inputWithCustom : ( proc : CustomProcessor*, channel : Int ) -> Signal;

    /** @deprecated Renamed to @ref fa_signal_local_output. */
    outputWithCustom : ( proc : CustomProcessor*, delay : Int, channel : Int, input : Signal ) -> Signal;
    
}

