
/**
    Provides dynamic typing. This can be used with all [Value references](@ref ValueReferences)
    and data structures to inspect the type at runtime.
 */

module Fa.Dynamic
{
    import Fa;
    import Fa.String;

    type TypeRepr = enum {
        NullTypeRepr,
        BoolTypeRepr, 
        I8TypeRepr, 
        I16TypeRepr, 
        I32TypeRepr, 
        I64TypeRepr,
        F32TypeRepr,
        F64TypeRepr,
        PairTypeRepr, 
        ListTypeRepr, 
        SetTypeRepr, 
        MapTypeRepr, 
        StringTypeRepr,
        RatioTypeRepr,
        MidiMessageTypeRepr,
        ActionTypeRepr,
        AudioDeviceTypeRepr,
        AudioStreamTypeRepr,
        MidiDeviceTypeRepr,
        MidiStreamTypeRepr,
        BufferTypeRepr,
        AtomicRingBufferTypeRepr,
        FileBufferTypeRepr
    };

    /** Dynamic typing interface.
     */
    type Dynamic = struct {
        getType : (Ptr -> TypeRepr)*
    };
        
    /**
        Whether the given value supports dynamic typing.
     */
    check : Ptr -> Bool;

    /**
        Returns a value representating the the type of the given value, which
        must implement @ref fa_dynamic_t. 
     */
    getType : Ptr -> TypeRepr;
    
    /**
        Returns a string with the name of the given type specifier.
    */
    typeName : (type : TypeRepr) -> String;

    // TODO a lot of stuff from top-level Fa module should go here
}

